//Colecciones iterables

//- Elementos de lectura
/*Se encargan de leer elementos de un iterable sencuencial usando for en bucle*/
//Ejemplo bucle for - in
void main() {
  const iterable = ['Salad', 'Popcorn', 'Toast'];
  for (final element in iterable) {
    print(element);
  }
}

//Ejemplo usar primero e ultimo
void main() {
  Iterable<String> iterable = const ['Salad', 'Popcorn', 'Toast'];
  print('The first element is ${iterable.first}');
  print('The last element is ${iterable.last}');
}

//Ejemplo uso de firstwhere()
bool predicate(String item) {
  return item.length > 5;
}

void main() {
  const items = ['Salad', 'Popcorn', 'Toast', 'Lasagne'];

  // You can find with a simple expression:
  var foundItem1 = items.firstWhere((item) => item.length > 5);
  print(foundItem1);

  // Or try using a function block:
  var foundItem2 = items.firstWhere((item) {
    return item.length > 5;
  });
  print(foundItem2);

  // Or even pass in a function reference:
  var foundItem3 = items.firstWhere(predicate);
  print(foundItem3);

  // You can also use an `orElse` function in case no value is found!
  var foundItem4 = items.firstWhere(
    (item) => item.length > 10,
    orElse: () => 'None!',
  );
  print(foundItem4);
}

//Ejercicio: Practica de escribir un predicado de prueba
/*
Su objetivo es implementar el predicado para singleWhere()que satisfaga las siguientes condiciones:

El elemento contiene el carácter 'a'.
El elemento comienza con el carácter 'M'.
*/
String singleWhere(Iterable<String> items) {
  return items.singleWhere(
      (element) => element.startsWith('M') && element.contains('a'));
}


//- Comprobacion de condiciones
/*Se trabaja con iterable.*/

//Ejemplo: usar any() y every()
void main() {
  const items = ['Salad', 'Popcorn', 'Toast'];
  if (items.any((item) => item.contains('a'))) {
    print('At least one item contains "a"');
  }
  if (items.every((item) => item.length >= 5)) {
    print('All items have length >= 5');
  }
}

//Ejercicio verificar que un iterable cumple una condicion
/*
   Use any()y every()para implementar dos funciones:
   Parte 1: Implementar anyUserUnder18().
   Regrese truesi al menos un usuario tiene 17 años o menos.
   Parte 2: Implementar everyUserOver13().
   Regrese truesi todos los usuarios tienen 14 años o más.
*/

bool anyUserUnder18(Iterable<User> users) {
  return users.any((user) => user.age < 18);
}

bool everyUserOver13(Iterable<User> users) {
  return users.every((user) => user.age > 13);
}

class User {
  String name;
  int age;

  User(
    this.name,
    this.age,
  );
}

//- Filtracion

//Ejemplo usando where()
void main() {
  var evenNumbers = const [1, -2, 3, 42].where((number) => number.isEven);

  for (final number in evenNumbers) {
    print('$number is even.');
  }

  if (evenNumbers.any((number) => number.isNegative)) {
    print('evenNumbers contains negative numbers.');
  }

  // If no element satisfies the predicate, the output is empty.
  var largeNumbers = evenNumbers.where((number) => number > 1000);
  if (largeNumbers.isEmpty) {
    print('largeNumbers is empty!');
  }
}

//Ejemplo uso de takewhile
void main() {
  const numbers = [1, 3, -2, 0, 4, 5];

  var numbersUntilZero = numbers.takeWhile((number) => number != 0);
  print('Numbers until 0: $numbersUntilZero');

  var numbersStartingAtZero = numbers.skipWhile((number) => number != 0);
  print('Numbers starting at 0: $numbersStartingAtZero');
}

//Ejercicio Filtrado de elementos de una lista
/*
     Úselo where()para implementar dos funciones:
     Parte 1: Implementar filterOutUnder21().
     Devuelve un correo electrónico Iterableque contiene todos los usuarios de 21 años o más.
     Parte 2: Implementar findShortNamed(). 
     Devuelve un correo electrónico Iterableque contiene todos los usuarios con nombres de longitud      3 o menos.
*/
Iterable<User> filterOutUnder21(Iterable<User> users) {
  return users.where((user) => user.age >= 21);
}

Iterable<User> findShortNamed(Iterable<User> users) {
  return users.where((user) => user.name.length <= 3);
}

class User {
  String name;
  int age;

  User(
    this.name,
    this.age,
  );
}

//- Cartografia
/*Permite aplicar una funcion sobre cada uno de los elementos*/

//Ejemplo uso del mapa para cambiar elementos
void main() {
  var numbersByTwo = const [1, -2, 3, 42].map((number) => number * 2);
  print('Numbers: $numbersByTwo');
}

//Ejercicio asignacion a un tipo diferente
/*
este ejercicio, su código toma un Iterablede Usery debe devolver un Iterableque contenga cadenas que contengan el nombre y la edad de cada usuario.
Cada cadena en el Iterabledebe seguir este formato: '{name} is {age}'—por ejemplo 'Alice is 21'.
*/
Iterable<String> getNameAndAges(Iterable<User> users) {
  return users.map((user) => '${user.name} is ${user.age}');
}

class User {
  String name;
  int age;

  User(
    this.name,
    this.age,
  );
}

//Ejercicio poner todo junto
/*
Escribe el siguiente código:

Parte 1: Implementar parseEmailAddresses().

Escriba la función parseEmailAddresses(), que toma un Iterable<String>correo electrónico que contiene las direcciones y devuelve un Iterable<EmailAddress>.
Use el método map()para mapear de a Stringa EmailAddress.
Cree los EmailAddressobjetos usando el constructor EmailAddress(String).
Parte 2: Implementar anyInvalidEmailAddress().

Escriba la función anyInvalidEmailAddress(), que toma un Iterable<EmailAddress>y devuelve truesi alguno EmailAddressen el Iterableno es válido.
Utilice el método any()junto con la función proporcionada isValidEmailAddress().
Parte 3: Implementar validEmailAddresses().

Escriba la función validEmailAddresses(), que toma un Iterable<EmailAddress>y devuelve otro Iterable<EmailAddress>que contiene solo direcciones válidas.
Utilice el método where()para filtrar el archivo Iterable<EmailAddress>.
Utilice la función proporcionada isValidEmailAddress()para evaluar si an EmailAddresses válido.
*/
Iterable<EmailAddress> parseEmailAddresses(Iterable<String> strings) {
  return strings.map((s) => EmailAddress(s));
}

bool anyInvalidEmailAddress(Iterable<EmailAddress> emails) {
  return emails.any((email) => !isValidEmailAddress(email));
}

Iterable<EmailAddress> validEmailAddresses(Iterable<EmailAddress> emails) {
  return emails.where((email) => isValidEmailAddress(email));
}

class EmailAddress {
  final String address;

  EmailAddress(this.address);

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is EmailAddress &&
              runtimeType == other.runtimeType &&
              address == other.address;

  @override
  int get hashCode => address.hashCode;

  @override
  String toString() {
    return 'EmailAddress{address: $address}';
  }
}
