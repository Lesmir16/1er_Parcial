//Laboratorio hoja de trucos en Dart

// - Interpolacion de cadenas
/*Numeros con parametros, devolviendo ambos enteros separados por espacio*/
void main{
  String stringify(int x, int y) {
    return '$x $y';
  }

// - Variables anulables
/*dos variables
  *Un anulable Stringnombrado namecon el valor 'Jane'.
  *Un anulable Stringnombrado addresscon el valor null*/

String? name = 'Jane';
String? address;

//- Operadores conscientes de nulo
/*Operadores utiles para manejrar valores nulos*/

//Ejemplo1
int? a; // = null
a ??= 3;
print(a); // <-- Prints 3.
a ??= 5;
print(a); // <-- Still prints 3.

//Ejemplo2
String? foo = 'a string';
String? bar; // = null

// Substitute an operator that makes 'a string' be assigned to baz.
String? baz = foo ?? bar;

void updateSomeVars() {
  // Substitute an operator that makes 'a string' be assigned to bar.
  bar ??= 'a string';
}

//- Acceso condicional a la propiedad
/*Cuando un objeto es nulo*/

//Ejemplo
// This method should return the uppercase version of `str`
// or null if `str` is null.
String? upperCaseIt(String? str) {
  return str?.toUpperCase();
}

//- Literales de colección
/*Asignar tipo valores nulos*/

//Ejemplo
// Assign this a list containing 'a', 'b', and 'c' in that order:
final aListOfStrings = ['a', 'b', 'c'];

// Assign this a set containing 3, 4, and 5:
final aSetOfInts = {3, 4, 5};

// Assign this a map of String to int so that aMapOfStringsToInts['myKey'] returns 12:
final aMapOfStringsToInts = {'myKey': 12};

// Assign this an empty List<double>:
final anEmptyListOfDouble = <double>[];

// Assign this an empty Set<String>:
final anEmptySetOfString = <String>{};

// Assign this an empty Map of double to int:
final anEmptyMapOfDoublesToInts = <double, int>{};

//- Sintaxis de flecha
/*Se define funciones ejecutando expresion derecha y devolviendo un valor*/

//Ejemplo
class MyClass {
  int value1 = 2;
  int value2 = 3;
  int value3 = 5;

  // Returns the product of the above values:
  int get product => value1 * value2 * value3;
  
  // Adds 1 to value1:
  void incrementValue1() => value1++; 
  
  // Returns a string containing each item in the
  // list, separated by commas (e.g. 'a,b,c'): 
  String joinWithCommas(List<String> strings) => strings.join(',');
}

// - Cascadas
/*Usando cascadas para establecer intrucciòn de las propiedades anInt, 
  *aStringy aListde a BigObject en 1, 'String!'y [3.0]*/

//class BigObject {
  int anInt = 0;
  String aString = '';
  List<double> aList = [];
  bool _done = false;
  
  void allDone() {
    _done = true;
  }
}

BigObject fillBigObject(BigObject obj) {
  return obj
    ..anInt = 1
    ..aString = 'String!'
    ..aList.add(3)
    ..allDone();
}

//- Getters y setters
/*Util para contralar una propiedad*/

//Ejemplo
/*Imagine que tiene una clase de carrito de compras que mantiene un registro privado List<double>   *de precios. Agregue lo siguiente:
  *Un captador llamado totalque devuelve la suma de los precios.
  *Un colocador que reemplaza la lista por una nueva, siempre que la nueva lista no contenga   *precios negativos (en cuyo caso, el colocador debe lanzar un InvalidPriceException).*/

class InvalidPriceException {}
class ShoppingCart {
  List<double> _prices = [];
  double get total => _prices.fold(0, (e, t) => e + t);
  set prices(List<double> value) {
    if (value.any((p) => p < 0)) {
      throw InvalidPriceException();
    } 
    _prices = value;
  }
}

//- Parametros posicionales opcionales
//Ejemplo
String joinWithCommas(int a, [int? b, int? c, int? d, int? e]) {
  var total = '$a';
  if (b != null) total = '$total,$b';
  if (c != null) total = '$total,$c';
  if (d != null) total = '$total,$d';
  if (e != null) total = '$total,$e';
  return total;
}

//- Parametros con nombre
//Ejemplo
class MyDataObject {
  final int anInt;
  final String aString;
  final double aDouble;

  MyDataObject({
     this.anInt = 1,
     this.aString = 'Old!',
     this.aDouble = 2.0,
  });

  MyDataObject copyWith({int? newInt, String? newString, double? newDouble}) {
    return MyDataObject(
      anInt: newInt ?? this.anInt,
      aString: newString ?? this.aString,
      aDouble: newDouble ?? this.aDouble,
    );
  }
}

//- Excepciones
/*Son excepciones no verificada*/
//Ejemplo
typedef VoidFunction = void Function();

class ExceptionWithMessage {
  final String message;
  const ExceptionWithMessage(this.message);
}

abstract class Logger {
  void logException(Type t, [String? msg]);
  void doneLogging();
}

void tryFunction(VoidFunction untrustworthy, Logger logger) {
  try {
    untrustworthy();
  } on ExceptionWithMessage catch (e) {
    logger.logException(e.runtimeType, e.message);
  } on Exception {
    logger.logException(Exception);
  } finally {
    logger.doneLogging();
  }
}

//- Uso de this en un constructor
//Ejemplo
class MyClass {
  final int anInt;
  final String aString;
  final double aDouble;
  
  MyClass(this.anInt, this.aString, this.aDouble);
}

//- Lista de Inicializadores
//Ejemplo
class FirstTwoLetters {
  final String letterOne;
  final String letterTwo;

  FirstTwoLetters(String word)
      : assert(word.length >= 2),
        letterOne = word[0],
        letterTwo = word[1];
}

//- Constructores con nombre
/*Permite tener multiples constructore en la clase.*/
//Ejemplo
class Color {
  int red;
  int green;
  int blue; 

  Color(this.red, this.green, this.blue);
  Color.black()
      : red = 0,
        green = 0,
        blue = 0;
}

//- Constructores de fabricas
/*Devuelve subtipos o valores nulos*/
/*Ejemplo
  *Si la lista tiene un valor, cree una IntegerSinglecon ese valor.
  *Si la lista tiene dos valores, cree una IntegerDoublecon los valores en orden.
  *Si la lista tiene tres valores, cree una IntegerTriplecon los valores en orden.
  *De lo contrario, lanza un Error.
*/

class IntegerHolder {
  IntegerHolder();
  
  factory IntegerHolder.fromList(List<int> list) {
    if (list.length == 1) {
      return IntegerSingle(list[0]);
    } else if (list.length == 2) {
      return IntegerDouble(list[0], list[1]);
    } else if (list.length == 3) {
      return IntegerTriple(list[0], list[1], list[2]);
    } else {
      throw Error();
    } 
  }
}

class IntegerSingle extends IntegerHolder {
  final int a;
  IntegerSingle(this.a); 
}

class IntegerDouble extends IntegerHolder {
  final int a;
  final int b;
  IntegerDouble(this.a, this.b); 
}

class IntegerTriple extends IntegerHolder {
  final int a;
  final int b;
  final int c;
  IntegerTriple(this.a, this.b, this.c); 
}

//- Redirigir constructores
/*Es cuando se encarga de redirigir un constructor a otro en la misma clase*/
//Ejemplo
class Color {
  int red;
  int green;
  int blue;
  
  Color(this.red, this.green, this.blue);
  Color.black() : this(0, 0, 0);
}

//- Constructores constantes
/*Es hacer que un constructor nunca cambie la variable de instancias, quede definitiva*/
//Ejemplo
class Recipe {
  final List<String> ingredients;
  final int calories;
  final double milligramsOfSodium;

  const Recipe(this.ingredients, this.calories, this.milligramsOfSodium);
}
